} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
if (res$status != 200){
warning(paste("Status:", res$status_code))
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "captaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "/carteras/creditos",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
#' @export
sb_get_v2 <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, paginas=1,
registros = 100){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad,
paginas = paginas,
registros = registros),
encode = "json")
## Warning when conection not succeeded
if (res$status != 200 & registros == 0){
warning(paste("Estatus:", res$status_code, ", revisa la consulta!"))
if (res$status == 500){
warning(paste("Estatus:", res$status_code, ". Internal Server error.
Contactar a 'soporteapis@sb.gob.do'"))
}
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "/carteras/creditos",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "carteras/creditos",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
#' @export
sb_get_v2 <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, paginas=1,
registros = 100){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad,
paginas = paginas,
registros = registros),
encode = "json")
## Warning when conection not succeeded
if (res$status != 200 & registros == 0){
warning(paste("Estatus:", res$status_code, ", revisa la consulta!"))
if (res$status == 500){
warning(paste("Estatus:", res$status_code, ". Internal Server error.
Contactar a 'soporteapis@sb.gob.do'"))
}
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "carteras/creditos",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
source("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "estados/resultados",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "/estados/resultados",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
sb_get_v2 <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, paginas=1,
registros = 100){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad,
paginas = paginas,
registros = registros),
encode = "json")
## Warning when conection not succeeded
if (res$status != 200 & registros == 0){
warning(paste("Estatus:", res$status_code, ", revisa la consulta!"))
if (res$status == 500){
warning(paste("Estatus:", res$status_code, ". Internal Server error.
Contactar a 'soporteapis@sb.gob.do'"))
}
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "/estados/resultados",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
print(df)
df
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
df
response
res
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
res
sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "/estados/resultados/eif",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
df
debugSource("C:/Users/NeilCarvajal/Documents/GitHub/supeRbancos/R/sb_get_v2.R", echo=TRUE)
df
end_point()
end_points()
?sb_get_v2()
#' GET Endpoints SB
#'
#' Esta nueva version permite utilizar la V2 del API. Ahora utiliza paginacion para
#' hacer las consultas indicando la cantidad de paginas y de registros a
#' consultar
#'
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones.
#' @param paginas cantidad de paginas a consultar. El numero de registros
#' depende le las paginas consultadas. 100 páginas por defecto.
#' @return string con el número de registros totales. Esta cantidad de
#' registros está basada en que la consulta está dividida en 100 páginas.
#' @export
get_num_registros <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, registros = NULL,
paginas = 100){
# base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
response <- GET(paste0(base_url, end_point),
add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_inicial,
tipoEntidad = tipo_entidad,
entidad = entidad,
paginas = paginas),
encode = "json")
num_records <- fromJSON(headers(response)$`x-pagination`)$TotalRecords
return(as.character(num_records))
}
View(get_num_registros)
get_num_registros()?
?get_num_registros()
# This file is part of the standard setup for testthat.
# It is recommended that you do not modify it.
#
# Where should you do additional test configuration?
# Learn more about the roles of various files in:
# * https://r-pkgs.org/tests.html
# * https://testthat.r-lib.org/reference/test_package.html#special-files
library(testthat)
library(supeRbancos)
test_check("supeRbancos")
endpoints <- c('captaciones/localidad', 'captaciones/moneda', 'captaciones/sector-depositante', 'carteras/creditos/clasificacion-riesgo', 'carteras/creditos/genero', 'carteras/creditos/localidad','carteras/creditos/moneda','carteras/creditos/sectores-economicos',
'carteras/creditos/tipo', 'carteras/creditos/facilidad', 'carteras/creditos/inversiones', 'detalle-entidades/acceso', 'estados/resultados/eic','estados/resultados/eif','estados/situacion/eic', 'estados/situacion/eif',
'indicadores/morosidad-estresada', 'indicadores/riesgo-credito', 'indicadores/financieros', 'indicadores/principales', 'reclamaciones/eif', 'reclamaciones/prousuario', 'solvencia/componentes','subagentes/operaciones',
'subagentes/actividad-economica', 'subagentes/total', 'tasas-comisiones/tarjetas-credito')
for (i in endpoints){
test_that("get works with no periodoFinal nor entidad", {
expect_s3_class(sb_get_v2(api_key, end_point, periodo_inicial,
tipo_entidad = "BM", paginas=1,
registros = 1), "data.frame")
})
# test_that("get works with no entidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          tipo_entidad =  "BM"), "data.frame")
# })
#
# test_that("get works with no tipoEntidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          entidad = "ACTIVO"), "data.frame")
# })
}
library(testthat)
endpoints <- c('captaciones/localidad', 'captaciones/moneda', 'captaciones/sector-depositante', 'carteras/creditos/clasificacion-riesgo', 'carteras/creditos/genero', 'carteras/creditos/localidad','carteras/creditos/moneda','carteras/creditos/sectores-economicos',
'carteras/creditos/tipo', 'carteras/creditos/facilidad', 'carteras/creditos/inversiones', 'detalle-entidades/acceso', 'estados/resultados/eic','estados/resultados/eif','estados/situacion/eic', 'estados/situacion/eif',
'indicadores/morosidad-estresada', 'indicadores/riesgo-credito', 'indicadores/financieros', 'indicadores/principales', 'reclamaciones/eif', 'reclamaciones/prousuario', 'solvencia/componentes','subagentes/operaciones',
'subagentes/actividad-economica', 'subagentes/total', 'tasas-comisiones/tarjetas-credito')
for (i in endpoints){
test_that("get works with no periodoFinal nor entidad", {
expect_s3_class(sb_get_v2(api_key, end_point, periodo_inicial,
tipo_entidad = "BM", paginas=1,
registros = 1), "data.frame")
})
# test_that("get works with no entidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          tipo_entidad =  "BM"), "data.frame")
# })
#
# test_that("get works with no tipoEntidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          entidad = "ACTIVO"), "data.frame")
# })
}
#' GET Endpoints SB
#'
#' Esta nueva version permite utilizar la V2 del API. Ahora utiliza paginacion para
#' hacer las consultas indicando la cantidad de paginas y de registros a
#' consultar
#'
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @param {paginas} {Numero de paginas a consultar. La cantidad de paginas
#' dependera del numero de registros que se consulten.Su valor por defecto es de
#' 1}
#' @param {registros} {Numero de registros a consultar. La cantidad de registros
#' dependera del numero de pagina que se consulten. Su valor por defecto es de
#' 100}
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get_v2 <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, paginas=1,
registros = 100){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad,
paginas = paginas,
registros = registros),
encode = "json")
## Warning when conection not succeeded
if (res$status_code != 200){
stop(paste("Estatus:", res$status_code, ", revisa la consulta!"))
if (res$status == 500){
warning(paste("Estatus:", res$status_code, ". Internal Server error.
Contactar a 'soporteapis@sb.gob.do'"))
}
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
# df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "/estados/resultados/eif",
periodo_inicial = "2023-01",
tipo_entidad = "BM")
endpoints <- c('captaciones/localidad', 'captaciones/moneda', 'captaciones/sector-depositante', 'carteras/creditos/clasificacion-riesgo', 'carteras/creditos/genero', 'carteras/creditos/localidad','carteras/creditos/moneda','carteras/creditos/sectores-economicos',
'carteras/creditos/tipo', 'carteras/creditos/facilidad', 'carteras/creditos/inversiones', 'detalle-entidades/acceso', 'estados/resultados/eic','estados/resultados/eif','estados/situacion/eic', 'estados/situacion/eif',
'indicadores/morosidad-estresada', 'indicadores/riesgo-credito', 'indicadores/financieros', 'indicadores/principales', 'reclamaciones/eif', 'reclamaciones/prousuario', 'solvencia/componentes','subagentes/operaciones',
'subagentes/actividad-economica', 'subagentes/total', 'tasas-comisiones/tarjetas-credito')
for (i in endpoints){
test_that("get works with no periodoFinal nor entidad", {
expect_s3_class(sb_get_v2(api_key, end_point, periodo_inicial,
tipo_entidad = "BM", paginas=1,
registros = 1), "data.frame")
})
# test_that("get works with no entidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          tipo_entidad =  "BM"), "data.frame")
# })
#
# test_that("get works with no tipoEntidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          entidad = "ACTIVO"), "data.frame")
# })
}
endpoints <- c('captaciones/localidad', 'captaciones/moneda', 'captaciones/sector-depositante', 'carteras/creditos/clasificacion-riesgo', 'carteras/creditos/genero', 'carteras/creditos/localidad','carteras/creditos/moneda','carteras/creditos/sectores-economicos',
'carteras/creditos/tipo', 'carteras/creditos/facilidad', 'carteras/creditos/inversiones', 'detalle-entidades/acceso', 'estados/resultados/eic','estados/resultados/eif','estados/situacion/eic', 'estados/situacion/eif',
'indicadores/morosidad-estresada', 'indicadores/riesgo-credito', 'indicadores/financieros', 'indicadores/principales', 'reclamaciones/eif', 'reclamaciones/prousuario', 'solvencia/componentes','subagentes/operaciones',
'subagentes/actividad-economica', 'subagentes/total', 'tasas-comisiones/tarjetas-credito')
for (i in endpoints){
test_that("get works with no periodoFinal nor entidad", {
expect_s3_class(sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0", end_point = i, periodo_inicial,
tipo_entidad = "BM", paginas=1,
registros = 1), "data.frame")
})
# test_that("get works with no entidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          tipo_entidad =  "BM"), "data.frame")
# })
#
# test_that("get works with no tipoEntidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          entidad = "ACTIVO"), "data.frame")
# })
}
endpoints <- c('captaciones/localidad', 'captaciones/moneda', 'captaciones/sector-depositante', 'carteras/creditos/clasificacion-riesgo', 'carteras/creditos/genero', 'carteras/creditos/localidad','carteras/creditos/moneda','carteras/creditos/sectores-economicos',
'carteras/creditos/tipo', 'carteras/creditos/facilidad', 'carteras/creditos/inversiones', 'detalle-entidades/acceso', 'estados/resultados/eic','estados/resultados/eif','estados/situacion/eic', 'estados/situacion/eif',
'indicadores/morosidad-estresada', 'indicadores/riesgo-credito', 'indicadores/financieros', 'indicadores/principales', 'reclamaciones/eif', 'reclamaciones/prousuario', 'solvencia/componentes','subagentes/operaciones',
'subagentes/actividad-economica', 'subagentes/total', 'tasas-comisiones/tarjetas-credito')
for (i in endpoints){
test_that("get works with no periodoFinal nor entidad", {
expect_s3_class(sb_get_v2(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = i, periodo_inicial = "2023-01",
tipo_entidad = "BM", paginas=1,
registros = 1), "data.frame")
})
# test_that("get works with no entidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          tipo_entidad =  "BM"), "data.frame")
# })
#
# test_that("get works with no tipoEntidad", {
#   expect_s3_class(sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
#                          end_point = i,
#                          periodo_inicial = "2022-01", periodo_final = "2022-02",
#                          entidad = "ACTIVO"), "data.frame")
# })
}
usethis::use_git()
devtools::check()
