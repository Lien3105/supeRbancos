if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
print(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
if (!is.null(dim(df))){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "captaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
?stop()
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
warning(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
if (!is.null(dim(df))){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
dim(df)
dim(df) = 0
dim(df) == 0
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
dim(df) == 0
dim(df) == c(0,0)
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
warning(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
if (dim(df) == 0){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
warning(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
if (dim(df) == c(0,0)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
c(0,0) in dim(df)
c(0,0) %in% dim(df)
0 %in% dim(df)
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
warning(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
if (0 %in% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
## Crear notin
`%notin%` <- Negate(`%in%`)
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
warning(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
0 %notin% dim(df)
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
warning(paste("Status:", res$status_code))
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
if (res$status != 200){
warning(paste("Status:", res$status_code))
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "caotaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
#' GET Endpoints SB
#'
#' Esta funcion carga los datos del endpoint solicitado en formato data frame
#' @param api_key Primary Key de la suscripcion.
#' @param end_point Endpoint a consultar. Usa 'end_points()' para ver
#' todas las opciones
#' @param periodo_inicial Fecha en donde incian las series solicitadas
#' @param periodo_final Fecha en donde terminan las series. No obligatoria.
#' @param entidad ID de la entidad a consultar. No se puede introducir al mismo
#' tiempo que 'tipo_entidad'. Usa 'entidades()' para ver todos los IDs.
#' @param tipo_entidad ID del tipo de entidad a consulta. No se puede introducir
#' al mimo tiempo que 'entidad'. Usa 'tipo_entidad()' para ver todas
#' las opciones
#' @return Dataframe con los datos del endpoint consultado
#' @export
sb_get <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL){
## Exit cuando entidad y tipo de entidad no sean nulas al mismo tiempo
if (!is.null(entidad) & !is.null(tipo_entidad)){
stop("Se introdujo entidad y tipo de entidad al mismo tiempo.")
}
## Exit cuanto periodo inicial es posterior al final
if (!is.null(periodo_final)){
if (lubridate::ym(periodo_inicial) > lubridate::ym(periodo_final)){
stop("Se introdujo un periodo inicial posterior al periodo final.")
}
}
## Define base_url
base_url <- "https://apis.sb.gob.do/estadisticas/"
## Get json
res <- httr::GET(paste0(base_url, end_point),
httr::add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
entidad = entidad,
tipoEntidad = tipo_entidad),
encode = "json")
## Warning when conection not succeeded
if (res$status != 200){
warning(paste("Status:", res$status_code))
}
## Parse json to df
df <- httr::content(res, as = "text", encoding = "UTF-8")
df <- jsonlite::fromJSON(df)
## JSON to dataframe
df <- as.data.frame(df$data)
## Crear notin
`%notin%` <- Negate(`%in%`)
if (0 %notin% dim(df)){
return(df)
} else{
stop(paste("No se ha encontrado", end_point, ", revisa la consulta"))
}
}
df <- sb_get(api_key = "b0f966428bde45dc913ffd59d88b9dc0",
end_point = "captaciones/sector-depositante",
periodo_inicial = "2022-01",
tipo_entidad = "BM")
